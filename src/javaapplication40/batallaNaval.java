/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication40;


import java.awt.event.KeyEvent;
import java.util.Enumeration;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;


/**
 *
 * @author Acer
 */
public final class batallaNaval extends javax.swing.JFrame {
    pantallaInicial valorPrueba = new pantallaInicial();
    public int tamañoMatriz= pantallaInicial.tamañoMatriz+2;
    public int numeroBarcos= pantallaInicial.numeroBarcos;
    public int barcosEnemigos= pantallaInicial.numeroBarcos;
    public String nombreJugador = pantallaInicial.playerName;
    public String[][] campoBatalla = new String[tamañoMatriz][tamañoMatriz];
    public int contador = 1;
    public int contadorTabla2 = 0;
    
    /**
     * Creates new form batallaNaval
     */
    public batallaNaval() {
        initComponents();
        regresar.setVisible(false);
        setCellRender(tabla2);                                                                                              //APLICAMOS EL MÉTODO 
        x.setTransferHandler(null);
        y.setTransferHandler(null);                                                                                         //NO PEGAR EN EL JTEXT
        JOptionPane.showMessageDialog(null, "BIENVENIDO CAPITÁN " + nombreJugador);
        JOptionPane.showMessageDialog(null, "NUESTRA MISIÓN ES DESTRUIR LA FLOTA ENEMIGA ANTES QUE ELLOS LA NUESTRA");
        this.tabla.setEnabled(false);                                                                                       //NO MODIFICAR LA TABLA                    
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/imagen1.jpg")).getImage());                       //INGRESAR ÍCONO A LA PANTALLA
        this.setTitle("Batalla Naval");                                                                                     //DEFINIR TÍTULO DE LA FRAME
        this.setLocationRelativeTo(this);                                                                                   //APARECER EN EL CENTRO DE LA PANTALLA
        atacar.setVisible(false);                                                                                           //BOTÓN ATACAR INVISIBLE                              
        switch (tamañoMatriz) {
            case 14:
                tabla.setRowHeight(19);                                                                                     //DEFINIMOS EL TAMAÑO DE LAS CASILLAS DE ACUERDO A LA DIFICULTAD
                campoBatalla();
                break;
            case 17:
                tabla.setRowHeight(16);
                campoBatalla();
                break;
            default:
                campoBatalla();
                break;
        }       
    }
    
    public void campoBatalla(){
          DefaultTableModel model = (DefaultTableModel) tabla.getModel();
         for (int i = 0; i <tamañoMatriz; i++) {                             //generar columnas de la matriz 
            model.addColumn("");             
        }    
        
        //Primera y última parte parte del mapa
        //parte media del mapa
        for(int i = 1; i < campoBatalla.length-1; i++) {                    // llenar los bordes de la matriz
            campoBatalla[0][i] = String.valueOf(i);
            campoBatalla[tamañoMatriz-1][i]= String.valueOf(i);
            campoBatalla[i][0]= "       "+String.valueOf(i);
            campoBatalla[i][tamañoMatriz-1] = String.valueOf(i);           
        }
        for (int i = 0; i <tamañoMatriz; i++) {                             //llenar la tabla
            model.addRow(campoBatalla[i]);          
        }     
    }
    
    
    public void setCellRender(JTable table) {
        Enumeration<TableColumn> en = table.getColumnModel().getColumns();
        while (en.hasMoreElements()) {
            TableColumn tc = en.nextElement();
            tc.setCellRenderer(new cambiarColor());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        coordenadasX = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        coordenadasY = new javax.swing.JLabel();
        x = new javax.swing.JTextField();
        y = new javax.swing.JTextField();
        agregarNave = new javax.swing.JButton();
        batalla = new javax.swing.JLabel();
        atacar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla2 = new javax.swing.JTable();
        batalla1 = new javax.swing.JLabel();
        regresar = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        coordenadasX.setText("Ingresa las coordenadas en X de tú barco 1:");

        tabla.setBackground(new java.awt.Color(102, 204, 255));
        tabla.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabla.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        tabla.setGridColor(new java.awt.Color(255, 255, 255));
        tabla.setRowHeight(26);
        tabla.getTableHeader().setReorderingAllowed(false);
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabla);

        coordenadasY.setText("Ingresa las coordenadas en Y de tú barco 1:");

        x.setBackground(new java.awt.Color(153, 204, 255));
        x.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                xKeyTyped(evt);
            }
        });

        y.setBackground(new java.awt.Color(153, 204, 255));
        y.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                yKeyTyped(evt);
            }
        });

        agregarNave.setBackground(new java.awt.Color(255, 0, 0));
        agregarNave.setText("Agregar Nave");
        agregarNave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                agregarNaveMouseClicked(evt);
            }
        });

        atacar.setBackground(new java.awt.Color(255, 0, 0));
        atacar.setText("Atacar");
        atacar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                atacarMouseClicked(evt);
            }
        });

        tabla2.setBackground(new java.awt.Color(153, 255, 255));
        tabla2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Movimientos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla2.setGridColor(new java.awt.Color(255, 255, 255));
        tabla2.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tabla2);
        if (tabla2.getColumnModel().getColumnCount() > 0) {
            tabla2.getColumnModel().getColumn(0).setResizable(false);
        }

        regresar.setBackground(new java.awt.Color(255, 0, 0));
        regresar.setText("REGRESAR");
        regresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                regresarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(723, 723, 723)
                .addComponent(batalla, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(coordenadasX)
                        .addGap(18, 18, 18)
                        .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(coordenadasY)
                        .addGap(18, 18, 18)
                        .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(agregarNave)
                .addGap(71, 71, 71)
                .addComponent(atacar)
                .addGap(65, 65, 65)
                .addComponent(batalla1))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(397, 397, 397)
                .addComponent(regresar))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(batalla)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(coordenadasX)
                            .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(coordenadasY)
                            .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(agregarNave))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(atacar)
                            .addComponent(batalla1))))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(regresar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(975, 443));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        // TODO add your handling code here:
        boolean a = tabla.isEditing();
        if (!a) {
            JOptionPane.showMessageDialog(null,"No se puede editar el mapa");
        }
    }//GEN-LAST:event_tablaMouseClicked

    //ingresar los barcos alados a la tabla
    private void agregarNaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarNaveMouseClicked
        // TODO add your handling code here:
        int coordenada1;
        int coordenada2;
      
        if(x.getText().equals("0") || y.getText().equals("0") ){                                                    //CONTROLAR TODAS LAS EXCEPCIONES POSIBLES
             JOptionPane.showMessageDialog(null, "ÉSTA COORDENADA NO EXISTE");                                                  
        }
        else if (x.getText().equals("") || y.getText().equals("")){
            JOptionPane.showMessageDialog(null, "INGRESE COORDENADAS");
        }
        else if (Integer.parseInt(x.getText())>tamañoMatriz-2|| Integer.parseInt(y.getText())>tamañoMatriz-2){
             JOptionPane.showMessageDialog(null, "ÉSTA COORDENADA NO EXISTE");
        }      
        else{                                                                                                       //SI LA COORDENADA INGRESADA ES VÁLIDA
            coordenada1 = Integer.parseInt(x.getText());
            coordenada2 = Integer.parseInt(y.getText());       
              
            
            if("@".equals(campoBatalla[coordenada1][coordenada2])){     
                JOptionPane.showMessageDialog(null, "ÉSTA COORDENADA YA FUE GUARDADA");              
            }
            else {          
                
                agregarNave(coordenada1,coordenada2);
                
                if(contador > numeroBarcos){
                     desplegarNavesEnemigas();
                     atacar.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_agregarNaveMouseClicked

    private void agregarNave(int coordenada1, int coordenada2){
    
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();  
        campoBatalla[coordenada1][coordenada2]= "@";
        model.setValueAt("@@@",coordenada1,coordenada2);

        coordenadasX.setText("Ingresa las coordenadas en X de tú barco " + (contador+1) + ":");
        coordenadasY.setText("Ingresa las coordenadas en Y de tú barco " + (contador+1) + ":");
        contador++; 
    }
    
    private void desplegarNavesEnemigas(){
        DefaultTableModel model = (DefaultTableModel) tabla.getModel(); 
        batalla1.setText("LAS NAVES ENEMIGAS HAN SIDO DESPLEGADAS");
        agregarNave.setVisible(false); 
        coordenadasX.setText("Ingresa las coordenadas X de tú ataque");
        coordenadasY.setText("Ingresa las coordenadas Y de tú ataque");
    
        for (int i = 1; i <= numeroBarcos ;i++ ) {
          int x = (int)(Math.random() * tamañoMatriz);
          int y = (int)(Math.random() * tamañoMatriz);
          
          if((x > 0 && x < tamañoMatriz-1) && (y > 0 && y < tamañoMatriz-1) && (campoBatalla[x][y] == null))
          {
              campoBatalla[x][y] =  "x";    
              model.setValueAt("xxx",x,y);
          }
          else{
              i--;
          }        
       }                             
    }
    
    
    
    private void xKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_xKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c)) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE ){
            evt.consume();
        }
    }//GEN-LAST:event_xKeyTyped

    private void yKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c)) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE){
            evt.consume();
        }
    }//GEN-LAST:event_yKeyTyped

    //
    private void atacarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_atacarMouseClicked
        // TODO add your handling code here:
        int coordenada1;
        int coordenada2;      
        
        if(x.getText().equals("0") || y.getText().equals("0") ){
             JOptionPane.showMessageDialog(null, "ÉSTA COORDENADA NO EXISTE");            
        }
        else if (x.getText().equals("") || y.getText().equals("")){
            JOptionPane.showMessageDialog(null, "INGRESE COORDENADAS");
        }
        else if (Integer.parseInt(x.getText())>tamañoMatriz-2|| Integer.parseInt(y.getText())>tamañoMatriz-2){
             JOptionPane.showMessageDialog(null, "ÉSTA COORDENADA NO EXISTE");
        }  
        else if(barcosEnemigos < 1){
            JOptionPane.showMessageDialog(null, "ENHORABUENA! HAS DERROTADO AL ENEMIGO");   
            regresar.setVisible(true);
            atacar.setText("CONTINUAR");
        }
        else if(numeroBarcos < 1){
            JOptionPane.showMessageDialog(null, "HEMOS FALLADO EN NUESTRA MISIÓN");    
            regresar.setVisible(true);
            atacar.setText("CONTINUAR");
            atacar.setText("CONTINUAR");
        }
        else{
            coordenada1 = Integer.parseInt(x.getText());
            coordenada2 = Integer.parseInt(y.getText()); 

            turnoJugador(coordenada1,coordenada2);
            turnoRival();           
        }       
    }//GEN-LAST:event_atacarMouseClicked

    private void regresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regresarMouseClicked
       
        new pantallaInicial().setVisible(true);
        dispose();
    }//GEN-LAST:event_regresarMouseClicked

    private void turnoJugador(int coordenada1, int coordenada2){
        DefaultTableModel model = (DefaultTableModel) tabla.getModel(); 
        DefaultTableModel model2 = (DefaultTableModel) tabla2.getModel(); 
        String [] a = new String [1];
        if(hitMarks(coordenada1,coordenada2)){
            JOptionPane.showMessageDialog(null, "NO PODEMOS ATACAR ESTA COORDENADA");  
            contadorTabla2--;
            model2.removeRow(contadorTabla2);
        }
        else{
            if (null == campoBatalla[coordenada1][coordenada2])               // si no hay nada en esa coordenada
            {       
                model2.addRow(a);
                model2.setValueAt("Lo siento, fallaste", contadorTabla2, 0);
                campoBatalla[coordenada1][coordenada2] = "-";                 //guardamos hitmark en la matriz
                model.setValueAt("--------",coordenada1,coordenada2);         // mostramos la hitmark en la tabla
                contadorTabla2++;
            }
            else switch (campoBatalla[coordenada1][coordenada2]) {
            //si el jugador unde una nave enemiga
                case "x":                   
                    model2.addRow(a);
                    model2.setValueAt("Boom! undiste una nave enemiga", contadorTabla2, 0);
                    campoBatalla[coordenada1][coordenada2]= "!";          // guardamos la hitmark en la matriz  
                    --barcosEnemigos;                                     // restamos la cantidad de carbos enemigos
                    model.setValueAt("!! !! !!",coordenada1,coordenada2); // mostramos la hitmark en la tabla
                     contadorTabla2++;
                    break;
                case "@":
                    //si unde la propia nave
                    model2.addRow(a);
                    model2.setValueAt("Oh no, undiste tú propia nave :(", contadorTabla2, 0);
                    campoBatalla[coordenada1][coordenada2] = "#";                // guardamos la hitmark
                    --numeroBarcos;                                              //restamos el numero de barcos del jugador
                    model.setValueAt("#####",coordenada1,coordenada2);           //mostramos la hitmark en la tabla
                    contadorTabla2++;
                    break;
                case "&":
                    // si no hay nada en esa coordenada
                    model2.addRow(a);
                    model2.setValueAt("Lo siento, fallaste", contadorTabla2, 0);
                    campoBatalla[coordenada1][coordenada2] = "-";                //guardamos hitmark en la matriz
                    model.setValueAt("--------",coordenada1,coordenada2);        // mostramos la hitmark en la tabla
                    contadorTabla2++;
                    break;
                default:
                    break;
            }
        }
        
    }
    
    private void turnoRival(){
        
        int coordenadaX = (int)(Math.random() * (tamañoMatriz-2)+1);                  //generamos dos valores aleatorios
        int coordenadaY = (int)(Math.random() * (tamañoMatriz-2)+1);                  
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();     
        DefaultTableModel model2 = (DefaultTableModel) tabla2.getModel(); 
        String [] a = new String [1];
        if (null == campoBatalla[coordenadaX][coordenadaY]){                    //si la máquina falla 
            model2.addRow(a);           
            model2.setValueAt("El enemigo ha fallado", contadorTabla2, 0);
            campoBatalla[coordenadaX][coordenadaY]= "&";                        //guardar hitmark
            //model.setValueAt("ataqueEnemigo",coordenadaX,coordenadaY); 
            contadorTabla2++;
        }
        else switch (campoBatalla[coordenadaX][coordenadaY]) {
            case "@":
                //si el enemigo acierta en un barco aliado              
                model2.addRow(a);
                model2.setValueAt("El enemigo te ha undido una nave!", contadorTabla2, 0);
                campoBatalla[coordenadaX][coordenadaY]= "xo";                   //Hit mark    
                --numeroBarcos;                                                 //restar el numero de barcos aliados            
                model.setValueAt("xoxox",coordenadaX,coordenadaY);              //mostrar hitmark en la tabla
                contadorTabla2++;
                break;
            case "-":
            case "#":
            case "!":
            case "x":
            case "&":
                turnoRival();                                                   //si la maquina repite un valor se repite el turno rival hasta que genere uno distinto
                break;
            default:
                break;
        }
    
    }
    
    private boolean hitMarks(int coordenadaX, int coordenadaY){
       return ("-".equals(campoBatalla[coordenadaX][coordenadaY]) || "#".equals(campoBatalla[coordenadaX][coordenadaY]) || "!".equals(campoBatalla[coordenadaX][coordenadaY])|| "xo".equals(campoBatalla[coordenadaX][coordenadaY]));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(batallaNaval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(batallaNaval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(batallaNaval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(batallaNaval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new batallaNaval().setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarNave;
    private javax.swing.JButton atacar;
    private javax.swing.JLabel batalla;
    private javax.swing.JLabel batalla1;
    private javax.swing.JLabel coordenadasX;
    private javax.swing.JLabel coordenadasY;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton regresar;
    private javax.swing.JTable tabla;
    private javax.swing.JTable tabla2;
    private javax.swing.JTextField x;
    private javax.swing.JTextField y;
    // End of variables declaration//GEN-END:variables
}
